# Imports
import joblib
import streamlit as st
import numpy as np
import pandas as pd

# Carregar o modelo e o scaler salvos
model_file = 'modelos/modelo_v1.pkl'
scaler_file = 'padronizadores/scaler_v1.pkl'
modelo = joblib.load(model_file)
scaler = joblib.load(scaler_file)

# Fun칞칚o para fazer a recomenda칞칚o de manuten칞칚o
def recomenda_manutencao(novo_dado):
    # Definir os nomes das colunas conforme o scaler foi ajustado
    colunas = ['vibracao', 'temperatura', 'pressao', 'umidade', 'horas_trabalho']
    
    # Converter o novo dado para DataFrame com os nomes de colunas corretos
    novo_dado_df = pd.DataFrame([novo_dado], columns=colunas)
    
    # Aplicar o scaler ao novo dado
    novo_dado_scaled = scaler.transform(novo_dado_df)
    
    # Fazer a previs칚o
    predicao = modelo.predict(novo_dado_scaled)
    predicao_proba = modelo.predict_proba(novo_dado_scaled)[:, 1]

    # Retornar a classe e a probabilidade
    return predicao[0], predicao_proba[0]

# Configura a p치gina da aplica칞칚o no Streamlit
st.set_page_config(page_title="Manuten칞칚o IoT", page_icon=":100:", layout="centered")

# Define o t칤tulo da aplica칞칚o
st.title("Sistema de Recomenda칞칚o de Manuten칞칚o Preventiva IoT 游깷")

# Define uma legenda explicativa da aplica칞칚o
st.caption("Recomenda칞칫es baseadas em Machine Learning")

st.header("Insira os valores dos Sensores:")
vibracao = st.number_input("Vibra칞칚o", value=0.0)
temperatura = st.number_input("Temperatura (춿C)", value=0.0)
pressao = st.number_input("Press칚o (PSI)", value=0.0)
umidade = st.number_input("Umidade (%)", value=0.0)
horas_trabalho = st.number_input("Horas de Trabalho", value=0)

# Inicializa o hist칩rico no estado da sess칚o, se ainda n칚o estiver definido
if "history" not in st.session_state:
    st.session_state["history"] = []

# Bot칚o para realizar a previs칚o
if st.button("Verificar necessidade de manuten칞칚o"):
    novo_dado = [vibracao, temperatura, pressao, umidade, horas_trabalho]
    classe, probabilidade = recomenda_manutencao(novo_dado)
    
    # Adicionar os dados ao hist칩rico
    st.session_state["history"].append(novo_dado + [classe, probabilidade])

    # Mostrar os resultados
    st.write(f"Classe da Previs칚o: {'Realizar manuten칞칚o' if classe == 1 else 'Nenhuma manuten칞칚o necess치ria'}")
    st.write(f"Probabilidade de manuten칞칚o: {probabilidade:.2%}")

    # Exibe o hist칩rico de an치lises
    st.subheader("Hist칩rico de An치lises")
    history_df = pd.DataFrame(st.session_state["history"], columns=["Vibra칞칚o", "Temperatura (췈C)", "Press칚o (PSI)", "Umidade (%)", "Horas Oper.", "Classe", "Probabilidade"])
    st.write(history_df)

st.caption("By Marcelo Medeiros | Cientista de Dados")
